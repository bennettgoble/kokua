
This is my custom KokuaNT for Linux Slackware  It has openjpeg 1.5.2 built 
into the build like singularity.  This repo will stay up to date with kokuaNT 

This build is for slackware64 14.1 should build in slackware64 14.0  Slackware64 14.1 current 
you will need it to edit the /indra/cmake/PNG.cmake to libpng16.
the media plugins I have made easy to drop in require libpng14 so you may need to copy your own 
webkit dynamics over for current.for voice you will need. 
Alien Bobs multilib . http://www.slackware.com/~alien/multilib/ below I have a install script for that.

If you want my scripts that maintain your system multilib and can make distro upgrading easy go here.
http://www.linuxquestions.org/questions/slackware-14/multilib-question-4175515564/#post5224104

If you are building with multilib you will need to keep the custom 3p-builds from trying to link to usr/lib because we are building
/usr/lib64 64 bit stuff. all the Viewer specific go in /usr/local/include and /usr/local/lib64 this make it simple for distro upgrades and updates. 
So during the build rename /usr/lib to /usr/lib~ when done building and installing you will see an empty folder /usr/lib
that is left over from the build you may delete that. ######!!!Remember To Change /usr/lib~ back to /usr/lib !!!!######## 
after you are done building  you may like to know Slackware can build 32 and 64 bit builds on the same machine.
 !!!!!!!!!!! NOT USESYSYTEMLIBS !!!!!!!!! That is only for 64bit. 

You will see two files "1-get-libs and 2-build-libs" This will upgrade your libboost to 1.57 and it also builds shared and static.
and we needed a shared and static build of hunspell. for slackware64 current it will build with the 4.9.2 but. I have a 
updated build for that with boost 1.58 hang in there for a week. 
take those two files "1-get-libs and 2-build-libs" and create a directory put them in it.
 run the first one sh 1-get-libs and the second one must be run as root user. sh 2-build-libs
 This build will not affect your Slackware build ##!EXCEPT!## for the custom gstreamer-0.10 header files in /usr/include.
 The originals are backed up and dated. you may switch them back at anytime or slackpkg reinstall gstreamer. 
 The boost headers are Linden Labs  custom tweaked headers. I have been using them for a few years no problems to my system.
  
The build script builds many things it takes them from the official SlackBuilds.org Repo's
and from NickyD and  Tonyasouther  bitbucket. and my modified forks of them. all of the SlackBuild stuff can
stay if you want to uninstall it. The last package we build has all the System lib's we need to build and run the viewer.
and all the others are their USL dependency's for everything.  

 
These will build and install everything you need to build  KokuaNT USL USESYSYTEMLIBS.

when done just reboot your computer. cd to KokuaNT and run the command below.

cd kokuant-usesystemlibs-slackware
kokuant-usesystemlibs-slackware64

export AUTOBUILD_PLATFORM_OVERRIDE='linux64'

then

autobuild  configure -c ReleaseOS -- -DLL_TESTS:BOOL=OFF -USESYSTEMLIBS:BOOL=ON -DWORD_SIZE=64  -DFMODEX:BOOL=ON  -DFMODEX_SDK_DIR=/opt/fmodapi44454linux/  -DOPENAL:BOOL=ON -DPACKAGE:BOOL=ON 2>&1 |tee configure.log

then cd "build-linux-x86_64" and run make -J the amount of cpus you have

IF you used my 1-get-libs and 2-build-libs then you can use my BuildMe.sh script. It will detect the amount of cpu's you have and use them all.
  sh Buildme.sh
  

 
 This will happen half way through the build. error do not worry.

 Installed packages file '/media/63a10037-fcdb-4cab-851c-f6783cb383c0/Z-build/bukdfirestorm/firestorm32/NewFolder/nelib/phoenix-firestorm-lgpl/build-linux-x86_64/packages/installed-packages.xml' not found; creating.
Unrecognized --versions output: 

If it does just type make -jX again and it will now go onto make2 setup. and it will finish the build and pack it.
Or re-run the sh Buildme.sh

 Now after it is built in build-linux-x86_64/newview/packaged/
 easiest way to install voice and plugins and dictionary 
 you can drop my dictionary voice and media plugins in how. cd inside build-linux-x86_64/newview/packaged/ open a terminal and type 
 "wget https://bitbucket.org/Drakeo/firestorm-testing-boost/downloads/diction-voice-media-codecs-webkit.tar.bz2" it will download the tar ball now run
 tar xvf diction-voice-media-codecs-webkit.tar.bz2  this will put everything in the right place. now you can delete the tarball.
 the packaged/bin folder. you can delete it. you can delete the built package also
 and re run make -jX and it will rebuild a package for you to put on your other Slackware machines. 
 have fun this has been tested on fresh installs of Slackware and heavily modified ones also.
 
alieb bob multilib install script. 
create a file name it "multilib-install" with out the quotes. past this in it.


 #!/bin/bash
# Init
FILE="/tmp/out.$$"
GREP="/bin/grep"
#....
# Make sure only root can run our script
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root " 1>&2
   exit 1
fi

# ...
##UPGRADE MULTI-LIB  ######
rsync -r -a -v --bwlimit=500 --delete --progress --stats rsync://rsync.slackware.org.uk/people/alien/multilib/14.1/ /var/cache/multilib/
cd /var/cache/multilib
upgradepkg --reinstall --install-new *.t?z
cd /var/cache/multilib/slackware64-compat32
upgradepkg  --install-new *?/*.t?z

you can use this script to keep your 32bit and multi-arch gcc up to date
just run it after your slackpkg upgrade-all.
remember to blacklist the alien and  slackbuild packages, how.
edit your /etc/slackpkg/blacklist from this
#[0-9]+_SBo
#[0-9]+alien
#[0-9]+compat32

To this 

[0-9]+_SBo
[0-9]+alien
[0-9]+compat32

######### !!!!!!!!!!!!!!!!!!!!!!############## REMEMBER No space to the left of them or it will not take effect ##############

New Tools Update
================
Linux 64 Bit
------------

Development system:
-------------

Development system is Debian Jessie (stable). The compiler is gcc-4.9. If starting with a new Jessie you will need to install
    build tools; Cmake, Mercurial, Bison, Flex, Tortoisehg, Kdiff3 (or another desired merge tool) and Python27.  
    Debian packages of the build tools work. Python27 is required so, after installing Python use 'python --version' to check the
    active version. Debian as with most linux distributions if difficult to make right on a hardware box but, it is easy to put in  a virtual machine. 
  Library archives for the most part are built with gcc-4.6.4. Boost, Colladadom, and Googlemock are built with gcc-4.9. This was necessary to get past viewer compile errors. If you need to build libraries you need gcc-4.6 which doesn't come with Debian Jessie but, is in Debian Stretch (Testing). With careful apt-pinning gcc-4.6.4 can be installed in Jessie from Stretch. Stretch was first choice as a development system but, after much work it turned out to have a compatabilty issue with VirtualBox Linux Guest Additions and 'X' which killed graphics and the ability to test a viewer.    


Preprations to build:
--------------

Autobuild and Python:

- Clone Autobuild
    cd ~/
    hg clone https://bitbucket.org/lindenlab/autobuild or if your have ssh setup ssh://hg@bitbucket.org/lindenlab/autobuild
- Prepare Python
Install python-pip 
sudo apt-get install python-pip
Install python-dev  but, it might already be installed
sudo apt-get install python-dev
Pip Install autobuild python dependencies 
sudo pip install 'hg+https://bitbucket.org/oz_linden/autobuild-metadata#egg=autobuild'

Clone, configure, and build Kokua-NT
----------------------

-  hg clone https://NickyP@bitbucket.org/NickyP/kokuant

  KokuaNT can be built with opensource or properity audio engine. The opensource solution uses openal for sounds and gstreamer for streaming music and audio visual files like mp4's. Use of the properity FMOD Ex library for sounds and streaming audio is supported but, the FMOD Ex library must be provided separately.

-  Configure for an openal and gstreamer build:
Following assumes a clean build tree.
cd kokuant
autobuild configure -c ReleaseOS -- -DLL_TESTS:BOOL=OFF -DFMODEX:BOOL=OFF -DOPENAL:BOOL=ON -DPACKAGE:BOOL=ON 2>&1 |tee configure.log

- Build the viewer
-autobuild build -c ReleaseOS 2>&1 |tee build.log

- Configuration and building takes about 1.5 hours on a 2 core machine.

- Test the build
cd build-linux-x86_64/newview/packaged
Install the viewer with
./install.sh select Y to place in user space.
This places the viewer in ~/.kokua-install and places a Kokua menu entry under Applications->Internet

Disclaimer
-----
-      This software is not provided nor supported by Linden Lab, the makers     of Second Life.



